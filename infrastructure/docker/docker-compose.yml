# Docker Compose for Metrify Smart Metering Data Pipeline
# Local development environment with all services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: metrify-postgres
    environment:
      POSTGRES_DB: metrify_dev
      POSTGRES_USER: metrify_dev
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./config/database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metrify_dev -d metrify_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: metrify-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: metrify-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_LOGGERS: "org.apache.zookeeper=WARN"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: metrify-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG4J_LOGGERS: "kafka.controller=WARN,kafka.producer.async.DefaultEventHandler=WARN,state.change.logger=WARN"
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: metrify-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - metrify-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: metrify-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: metrify-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: metrify-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: metrify-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "6831:6831"    # Jaeger agent
      - "6832:6832"    # Jaeger agent
      - "9411:9411"    # Zipkin
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Metrify API Service
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: metrify-api
    environment:
      - METRIFY_ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=metrify_dev
      - DB_USERNAME=metrify_dev
      - DB_PASSWORD=dev_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CONSUMER_GROUP=metrify-dev
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin123
      - REDIS_URL=redis://redis:6379
    ports:
      - "8000:8000"
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - metrify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Metrify Ingestion Worker
  ingestion-worker:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: metrify-ingestion-worker
    environment:
      - METRIFY_ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=metrify_dev
      - DB_USERNAME=metrify_dev
      - DB_PASSWORD=dev_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CONSUMER_GROUP=metrify-ingestion-dev
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin123
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - metrify-network
    command: ["python", "-m", "src.presentation.workers.ingestion_worker"]

  # Metrify Processing Worker
  processing-worker:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: metrify-processing-worker
    environment:
      - METRIFY_ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=metrify_dev
      - DB_USERNAME=metrify_dev
      - DB_PASSWORD=dev_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CONSUMER_GROUP=metrify-processing-dev
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin123
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - metrify-network
    command: ["python", "-m", "src.presentation.workers.processing_worker"]

  # Metrify Monitoring Worker
  monitoring-worker:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: metrify-monitoring-worker
    environment:
      - METRIFY_ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=metrify_dev
      - DB_USERNAME=metrify_dev
      - DB_PASSWORD=dev_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CONSUMER_GROUP=metrify-monitoring-dev
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin123
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - metrify-network
    command: ["python", "-m", "src.presentation.workers.monitoring_worker"]

  # Airflow for workflow orchestration
  airflow:
    image: apache/airflow:2.7.3-python3.11
    container_name: metrify-airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://metrify_dev:dev_password@postgres:5432/metrify_dev
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW__WEBSERVER__EXPOSE_HOSTNAME: 'true'
      AIRFLOW__WEBSERVER__EXPOSE_STACKTRACE: 'true'
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
      AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'UTC'
    ports:
      - "8081:8080"
    volumes:
      - ../../src/infrastructure/external/airflow/dags:/opt/airflow/dags
      - ../../logs/airflow:/opt/airflow/logs
      - airflow_data:/opt/airflow
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - metrify-network
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@metrify.com --password admin &&
        airflow webserver --port 8080 &
        airflow scheduler
      "

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  airflow_data:
    driver: local

# Networks
networks:
  metrify-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
