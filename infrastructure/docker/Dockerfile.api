# Multi-stage Dockerfile for Metrify Smart Metering API
# Optimized for production deployment

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create and set working directory
WORKDIR /app

# Copy modular requirements first for better caching
COPY requirements_core.txt .
COPY requirements_ml.txt .
COPY requirements_cloud.txt .
COPY requirements_streaming.txt .
COPY requirements_dbt.txt .
COPY requirements_quality.txt .
COPY requirements_monitoring.txt .

# Install Python dependencies in stages to avoid conflicts
RUN pip install --no-cache-dir -r requirements_core.txt && \
    pip install --no-cache-dir -r requirements_streaming.txt && \
    pip install --no-cache-dir -r requirements_cloud.txt && \
    pip install --no-cache-dir -r requirements_quality.txt && \
    pip install --no-cache-dir -r requirements_monitoring.txt && \
    pip install --no-cache-dir -r requirements_ml.txt && \
    pip install --no-cache-dir -r requirements_dbt.txt

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    METRIFY_ENVIRONMENT=production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r metrify && useradd -r -g metrify metrify

# Create application directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY src/ ./src/
COPY config/ ./config/
COPY production.env .env

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R metrify:metrify /app

# Switch to non-root user
USER metrify

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["python", "-m", "uvicorn", "presentation.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
