# Metrify API Deployment
# Production deployment for the main API service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrify-api
  namespace: metrify
  labels:
    app: metrify-api
    component: api
    tier: frontend
    app.kubernetes.io/name: metrify-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Metrify Smart Metering API Service"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: metrify-api
  template:
    metadata:
      labels:
        app: metrify-api
        component: api
        tier: frontend
        app.kubernetes.io/name: metrify-api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: metrify-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: metrify/metrify-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: METRIFY_ENVIRONMENT
          value: "production"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: metrify-database-secret
              key: host
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: metrify-database-secret
              key: database
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: metrify-database-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: metrify-database-secret
              key: password
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: metrify-kafka-config
              key: bootstrap_servers
        - name: KAFKA_SECURITY_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: metrify-kafka-config
              key: security_protocol
        - name: KAFKA_SASL_USERNAME
          valueFrom:
            secretKeyRef:
              name: metrify-kafka-secret
              key: username
        - name: KAFKA_SASL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: metrify-kafka-secret
              key: password
        - name: S3_REGION
          valueFrom:
            configMapKeyRef:
              name: metrify-s3-config
              key: region
        - name: S3_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: metrify-s3-config
              key: bucket_name
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: metrify-s3-secret
              key: access_key_id
        - name: S3_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: metrify-s3-secret
              key: secret_access_key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: metrify-jwt-secret
              key: secret_key
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: metrify-redis-config
              key: url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: metrify-api-config
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - metrify-api
              topologyKey: kubernetes.io/hostname
